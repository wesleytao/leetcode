class Solution {//DP: F[i][j]: the longest distance if refueling i times in the first j stations.(where one must refuel in j station)
public:
    long long int max(long long int A, long long int B)
    {
        return A>B ? A : B;
    }
    int minRefuelStops(int target, int startFuel, vector<vector<int>>& stations) {
        int maxn = 505;
        long long int gas[maxn];
        long long int pos[maxn];
        long long int f[maxn][maxn];
        int n=stations.size();
        for (int i = 1 ; i <= n; i ++)
        {
            gas[i] = stations[i-1][1];
            pos[i] = stations[i-1][0];
        }
        pos[0]=0;
        memset(f, -1, sizeof(f));
        f[0][0] = startFuel;
        if (startFuel >= target)
            return 0;
        for (int i = 1; i <= n; i++)
            for (int j =i; j <= n; j++)
            {
                for (int k = i-1; k < j; k++)//i-1 refuel in k station
                    if (f[i-1][k] >= pos[j] - pos[k])
                        f[i][j] = max(f[i][j], f[i-1][k] - pos[j] + pos[k] + gas[j]);
                if (f[i][j] >= target - pos[j])
                    return i;
            }
        return -1;
    }
};